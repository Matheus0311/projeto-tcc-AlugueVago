<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Editar Usuário</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet">

</head>
<style>

  /*Abrir o dorpmeun certo*/

  .dropdown-menu.right-0 {
    right: 0;
    left: auto;
  }
  
  .dropdown-menu.left-0 {
    left: 0;
    right: auto;
  }
  
  @media (max-width: 768px) {
    .dropdown-menu.left-0, .dropdown-menu.right-0 {
      right: auto;
      left: 0;
    }
  }
  


  .profile-image {
    margin-top: 20px;
    text-align: center;
  }

  .profile-image img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
  }

  /* Estilos para a imagem de perfil na navbar */
  .profile-image-navbar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    margin-right: 10px;
    margin-top: 5px;
  }

  /* Estilos para a animação do link na navbar */
  .nav-link {
    position: relative;
    display: inline-block;
    color: #ffffff;
    transition: color 0.3s;
  }
  .nav-link:hover {
    color: #fff;
  }
  .nav-link::before {
    content: "";
    position: absolute;
    width: 0;
    height: 2px;
    background-color: white;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    transition: width 0.3s;
  }
  .nav-link:hover::before {
    width: 100%;
  }
  .navbar {
    background-color: #4a90e2;
  }
   
  .input-container {
    position: relative;
    margin-bottom: 1rem;
  }
  .input-container label {
    font-weight: 600;
    color: #4a90e2;
    margin-bottom: 0.25rem;
  }
  .input-container input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 0.25rem;
    transition: border-color 0.3s;
  }
  .input-container input:focus {
    outline: none;
    border-color: #4a90e2;
  }
  .input-container .helper-text {
    font-size: 0.75rem;
    color: #999;
    margin-top: 0.25rem;
  }
  .upload-container {
    border: 2px dashed #ccc;
    border-radius: 0.25rem;
    padding: 1rem;
    text-align: center;
    transition: border-color 0.3s;
  }
  .upload-container:hover {
    border-color: #4a90e2;
  }
  .upload-container p {
    font-size: 0.875rem;
    color: #999;
    margin: 0.5rem 0;
  }

  .p-8 {
    padding: 1rem;
}



</style>
</head>
<body class="bg-gray-100">
<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-gradient-to-r from-blue-300 to-blue-500 py-2">
  <div class="container mx-auto">
    <a class="navbar-brand text-lg font-semibold text-white hover:text-blue-300" href="/">AlugueVago</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
      aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ml-auto">
        <li class="nav-item">
          <a class="nav-link text-white" href="/">Home</a>
        </li>
        <li class="nav-item dropdown relative">
          <a class="nav-link dropdown-toggle flex items-center" href="#" id="favoritesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <i class="fas fa-star text-white mr-2"></i> Favoritos <span id="favoritesCount" class="badge badge-pill badge-primary">0</span>
          </a>
          
          <div class="dropdown-menu hidden absolute right-0 mt-2 w-70 bg-white border rounded-md shadow-lg group-hover:block" aria-labelledby="favoritesDropdown">
            <div id="favoritesList"></div>
          </div>
        </li>
        
        <% if (userIsLoggedIn) { %>
         
          <li class="nav-item dropdown relative">
            <a class="nav-link dropdown-toggle flex items-center" href="#" id="profileDropdownToggle" role="button" data-toggle="dropdown"
              aria-haspopup="true" aria-expanded="false">
              <span class="text-white"><%= user.nomeUsuario %></span>
            </a>  
            <div class="dropdown-menu hidden absolute right-0 mt-2 w-28 bg-white border rounded-md shadow-lg group-hover:block" aria-labelledby="profileDropdownToggle">
              <a class="block px-4 py-2 text-gray-800 hover:bg-gray-100 text-decoration-none" href="/imoveis/meus-imoveis">Meus Imoveis</a>
              <a class="block px-4 py-2 text-gray-800 hover:bg-gray-100 text-decoration-none" href="/users/account-config">Configuração de Conta</a>
              <a class="block px-4 py-2 text-gray-800 hover:bg-gray-100 text-decoration-none" href="/users/logout">Deslogar</a>
            </div>
          </li>
          <div>
            <% if (user.imagemPerfil) { %>
              <img class="profile-image-navbar" src="/users/<%= user.imagemPerfil %>" alt="Imagem de Perfil" />
            <% } else { %>
              <i class="profile-image-navbar fas fa-user-circle fa-2x bg-blue-300 text-gray-500"></i>
            <% } %>
          </div>  
                    
          <% } else { %>
          <li class="nav-item">
            <a class="nav-link profile-link text-white" href="/users/login">
              <i class="fas fa-user"></i>
              Fazer Login
            </a>
            <li><a class="nav-link text-white" href="/users/cadastro">Cadastro</a></li>
          </li>
        <% } %>
        
      </ul>
    </div>
  </div>
</nav>

  <div class="container mx-auto mt-4">
    <div class="card max-w-md mx-auto mb-4">
      <div class="card-body bg-white p-8 py-3 px-4 rounded-lg shadow-md w-100">
        <h1 class="text-2xl font-semibold text-center mb-6">Editar Usuário</h1>

      
        <form action="/users/edit/<%= user.id %>" method="POST" enctype="multipart/form-data" id="userForm">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <!-- Seção 1 -->
            <div>
              <div class="grid grid-cols-1 gap-4">
                <div class="input-container">
                  <label for="nomeUsuario">
                    Nome: 
                    <span class="info-icon" title="Digite um nome com 3 a 64 caracteres">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="text"
                    id="nomeUsuario"
                    name="nomeUsuario"
                    class="rounded-md focus:border-blue-500"
                    maxlength="64"
                    required
                    value="<%= user.nomeUsuario %>"
                    pattern=".{3,64}"
                    title="Digite um nome com 3 a 64 caracteres"
                  />
                  <div class="error-message" id="nomeError"></div>
                </div>
                <div class="input-container">
                  <label for="emailUsuario">
                    Email: 
                    <span class="info-icon" title="Digite um nome email válido com @ e .">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="email"
                    id="emailUsuario"
                    name="emailUsuario"
                    class="rounded-md focus:border-blue-500"
                    value="<%= user.emailUsuario %>"
                    required
                    title="Digite um email válido com @ e ."
                  />
                  <div class="error-message" id="emailError"></div>
                </div>
                <div class="input-container">
                  <label for="senhaUsuario">
                    Senha: <span class="text-red-500">*</span>
                    <span class="info-icon" title="Mínimo 6 caracteres, pelo menos 1 letra e 1 número">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="password"
                    id="senhaUsuario"
                    name="senhaUsuario"
                    class="rounded-md focus:border-blue-500"
                    minlength="6"
                    required
                    oninput="updatePasswordStrength(this.value)"
                  />
                  <div class="error-message" id="senhaError"></div>
                  <div class="helper-text">Mínimo 6 caracteres</div>
                  <div class="mt-1 relative">
                    <div class="h-2 w-70 rounded-full bg-gray-300">
                      <div id="password-strength" class="h-full rounded-full transition-all"></div>
                    </div>
                    <div class="absolute text-xs font-semibold" id="password-strength-label">Fraca</div>
                  </div>
                </div>
                <div class="input-container">
                  <label for="confirmaSenha">
                    Confirme a Senha: <span class="text-red-500">*</span>
                    <span class="info-icon" title="Digite a mesma senha novamente">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="password"
                    id="confirmaSenha"
                    name="confirmaSenha"
                    class="rounded-md focus:border-blue-500"
                    minlength="6"
                    required
                  />
                  <div class="error-message" id="confirmaSenhaError"></div>
                </div>
              </div>
            </div>
        
            <!-- Seção 2 -->
            <div>
              <div class="grid grid-cols-1 gap-4">
                <div class="input-container">
                  <label for="rgUsuario">
                    RG: 
                    <span class="info-icon" title="Digite um RG válido com 8 a 9 dígitos">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="text"
                    id="rgUsuario"
                    name="rgUsuario"
                    placeholder="Digite sem pontuação"
                    class="rounded-md focus:border-blue-500"
                    maxlength="9"
                    required
                    value="<%= user.rgUsuario %>"
                    pattern="[0-9]{8,9}"
                    title="Digite um RG válido com 8 a 9 dígitos"
                  />
                  <div class="error-message" id="rgError"></div>
                </div>
                <div class="input-container">
                  <label for="cpfUsuario">
                    CPF: 
                    <span class="info-icon" title="Digite um CPF válido com 11 dígitos">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="text"
                    id="cpfUsuario"
                    name="cpfUsuario"
                    placeholder="Digite sem pontuação"
                    class="rounded-md focus:border-blue-500"
                    maxlength="11"
                    required
                    value="<%= user.cpfUsuario %>"
                    pattern="[0-9]{11}"
                    title="Digite um CPF válido com 11 dígitos"
                  />
                  <div class="error-message" id="cpfError"></div>
                </div>
                <div class="input-container">
                  <label for="rendaMensalUsuario">
                    Renda Mensal: 
                    <span class="info-icon" title="Digite sua renda mensal">
                      <i class="text-gray-500 cursor-pointer">&#9432;</i>
                    </span>
                  </label>
                  <input
                    type="number"
                    id="rendaMensalUsuario"
                    name="rendaMensalUsuario"
                    class="rounded-md focus:border-blue-500"
                    value="<%= user.rendaMensalUsuario %>"
                    required
                    title="Digite sua renda mensal"
                  />
                  <div class="error-message" id="rendaMensalError"></div>
                </div>
              </div>
              <div class="upload-container">
                <label for="imagemPerfil" class="block text-gray-700 font-semibold mb-2">Imagem de Perfil:</label>
                <div class="relative">
                  <input
                    type="file"
                    id="imagemPerfil"
                    name="imagemPerfil"
                    class="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    accept="image/*"
                    onchange="updateImageLabel(this)"
                  />
                  <p id="imagemPerfilLabel">Clique para selecionar uma imagem</p>
                </div>
              </div>
            </div>
          </div>
        
          <div class="mt-4 flex justify-between">
            <button
              type="submit"
              class="w-1/2 bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700 transition duration-300"
            >
              Salvar Alterações
            </button>
        
            <button
              type="button"
              onclick="window.location.href='/users/account-config'"
              class="w-1/2 bg-red-500 hover:bg-red-600 text-black py-2 rounded-md transition duration-300 ml-2"
            >
              Cancelar Edição
            </button>
          </div>
        </form>
        
      </div>
    </div>
  </div>
  
  
  <script>
    const form = document.getElementById('userForm');
    const nomeInput = document.getElementById('nomeUsuario');
    const emailInput = document.getElementById('emailUsuario');
    const senhaInput = document.getElementById('senhaUsuario');
    const confirmaSenhaInput = document.getElementById('confirmaSenha');
    const rgInput = document.getElementById('rgUsuario');
    const cpfInput = document.getElementById('cpfUsuario');
    const rendaInput = document.getElementById('rendaMensalUsuario');
    
  
    form.addEventListener('submit', (event) => {
      let isValid = true;
  
      if (nomeInput.value.length < 3 || nomeInput.value.length > nomeInput.maxLength) {
        isValid = false;
        displayError(nomeInput, 'Digite um nome com 3 a ' + nomeInput.maxLength + ' caracteres');
      }
  
      if (!validateEmail(emailInput.value)) {
        isValid = false;
        displayError(emailInput, 'Digite um email válido');
      }
  
      if (!validateSenha(senhaInput.value)) {
        isValid = false;
        displayError(senhaInput, 'Mínimo 6 caracteres, pelo menos 1 letra e 1 número');
      }
  
      if (senhaInput.value !== confirmaSenhaInput.value) {
        isValid = false;
        displayError(confirmaSenhaInput, 'As senhas não coincidem');
      }
  
      if (!/^[0-9]{8,9}$/.test(rgInput.value) || rgInput.value.length > rgInput.maxLength) {
        isValid = false;
        displayError(rgInput, 'Digite um RG válido com 8 a 9 dígitos');
      }
      
      if (!/^[0-9]{11}$/.test(cpfInput.value) || cpfInput.value.length > cpfInput.maxLength) {
        isValid = false;
        displayError(cpfInput, 'Digite um CPF válido com 11 dígitos');
      }
  
      if (!isValidCPF(cpfInput.value)) {
        isValid = false;
        displayError(cpfInput, 'Digite um CPF válido');
      }
      
  
      if (!rendaInput.value) {
        isValid = false;
        displayError(rendaInput, 'Digite a renda mensal');
      }
  
      if (!isValid) {
        event.preventDefault();
      }
  
    });
  
    function validateEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }
  
    function validateSenha(senha) {
      const senhaRegex = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/;
      return senhaRegex.test(senha);
    }
  
    function displayError(input, message) {
      const errorDiv = input.nextElementSibling;
      errorDiv.textContent = message;
      input.classList.add('border', 'border-red-500');
    }
  
    function clearError(input) {
      const errorDiv = input.nextElementSibling;
      errorDiv.textContent = '';
      input.classList.remove('border', 'border-red-500');
    }
  
    
  
    nomeInput.addEventListener('input', () => clearError(nomeInput));
    emailInput.addEventListener('input', () => clearError(emailInput));
    senhaInput.addEventListener('input', () => clearError(senhaInput));
    confirmaSenhaInput.addEventListener('input', () => clearError(confirmaSenhaInput));
    rgInput.addEventListener('input', () => clearError(rgInput));
    cpfInput.addEventListener('input', () => clearError(cpfInput));
    rendaInput.addEventListener('input', () => clearError(rendaInput));
  
    rgInput.addEventListener('input', (event) => {
      event.target.value = event.target.value.replace(/\D/g, ''); 
    });
  
    
    
    rendaInput.addEventListener('input', (event) => {
      event.target.value = event.target.value.replace(/\D/g, ''); 
    });
  
  
    function isValidCPF(cpf) {
      cpf = cpf.replace(/\D/g, ''); // Remove caracteres não numéricos
      if (cpf.length !== 11) {
        return false;
      }
    
      // Verifica se todos os dígitos são iguais (situação inválida)
      if (/^(\d)\1+$/.test(cpf)) {
        return false;
      }
    
      const cpfArray = cpf.split('').map(Number);
    
      // Calcula o primeiro dígito verificador
      let sum = 0;
      for (let i = 0; i < 9; i++) {
        sum += cpfArray[i] * (10 - i);
      }
      let remainder = (sum * 10) % 11;
      if (remainder === 10 || remainder === 11) {
        remainder = 0;
      }
      if (remainder !== cpfArray[9]) {
        return false;
      }
    
      // Calcula o segundo dígito verificador
      sum = 0;
      for (let i = 0; i < 10; i++) {
        sum += cpfArray[i] * (11 - i);
      }
      remainder = (sum * 10) % 11;
      if (remainder === 10 || remainder === 11) {
        remainder = 0;
      }
      if (remainder !== cpfArray[10]) {
        return false;
      }
    
      return true;
    }
    
    // Exemplos de uso:
    const cpf1 = '123.456.789-09';
    console.log(isValidCPF(cpf1)); // Deve retornar true
    
    const cpf2 = '111.222.333-44';
    console.log(isValidCPF(cpf2)); // Deve retornar false
    
  
  
  </script>

<script>
  function updatePasswordStrength(password) {
    const strengthIndicator = document.getElementById('password-strength');
    const strengthLabel = document.getElementById('password-strength-label');
    const strength = calculatePasswordStrength(password);
    const colors = ['#FF0000', '#FF4500', '#FFD700', '#32CD32', '#00FF00'];
    const labels = ['Fraca', 'Média', 'Forte', 'Muito Forte'];

    strengthIndicator.style.width = `${strength * 25}%`;
    strengthIndicator.style.backgroundColor = colors[strength];
    strengthLabel.textContent = labels[strength];
    strengthLabel.style.color = colors[strength];
  }

  function calculatePasswordStrength(password) {
    if (password.length < 6) return 0;
    if (password.length < 8) return 1;
    if (/[a-zA-Z]/.test(password) && /\d/.test(password) && /[!@#$%^&*()_+{}\[\]:;<>,.?~\-]/.test(password)) return 3;
    if (/[a-zA-Z]/.test(password) && /\d/.test(password)) return 2;
    if (/[a-zA-Z]/.test(password)) return 1;
    return 4;
  }
</script>


<script>
  // Chamando a função quando a página carrega
  window.addEventListener('load', () => {
    populateFavoritesList();
  });
</script>

<script>
    
  const favoritesList = document.getElementById('favoritesList');

  async function getImovelData(imovelId) {
    try {
      const response = await fetch(`/imoveis/${imovelId}/relevant-fields`);
      if (response.ok) {
        const data = await response.json();
        const relevantData = {
          id: data.id,
          enderecoRua: data.enderecoRua,
          enderecoNumero: data.enderecoNumero,
          enderecoBairro: data.enderecoBairro,
          enderecoCidade: data.enderecoCidade,
          valor: data.valor
        };
        return relevantData;
      } else {
        console.error('Failed to fetch property data');
        return null;
      }
    } catch (error) {
      console.error('Error fetching property data:', error);
      return null;
    }
  }
  
  async function populateFavoritesList() {
    favoritesList.innerHTML = '';
  
    let hasFavoritedProperties = false;
    let favoritesCount = 0;
  
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key.startsWith('liked_') && localStorage.getItem(key) === 'true') {
        const imovelId = key.substring(6);
        const imovel = await getImovelData(imovelId);
        if (imovel) {
          hasFavoritedProperties = true;
          favoritesCount++;
  
          const listItem = document.createElement('div');
          listItem.className = 'dropdown-item';
          const link = document.createElement('a');
          link.href = `/imoveis/informacoes-imovel/${imovelId}`;
  

  
          link.innerHTML = `

            <p><strong>Endereço:</strong> ${imovel.enderecoRua}, ${imovel.enderecoNumero}, ${imovel.enderecoBairro}, ${imovel.enderecoCidade}</p>
            <p><strong>Valor:</strong> R$ ${imovel.valor}</p>
            <hr>
          `;
          listItem.appendChild(link);
          favoritesList.appendChild(listItem);
        }
      }
    }
  
    const favoritesCountSpan = document.getElementById('favoritesCount');
    favoritesCountSpan.textContent = favoritesCount;
  
    if (!hasFavoritedProperties) {
      const noFavoritesMessage = document.createElement('div');
      noFavoritesMessage.className = 'dropdown-item';
      noFavoritesMessage.innerText = 'Nenhum imóvel curtido ainda ( ´•︵•` )';
      favoritesList.appendChild(noFavoritesMessage);
    }
  }
  
  const favoritesDropdown = document.getElementById('favoritesDropdown');
  favoritesDropdown.addEventListener('click', populateFavoritesList);
  

</script>

<!-- Scripts JavaScript -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/alpinejs@2.8.2/dist/alpine.min.js" defer></script>
</body>
</html>
